# -*- coding: utf-8 -*-
"""
Authentication and User Management System
"""
import streamlit as st
from enum import Enum
from typing import Optional, Dict, Any
from datetime import datetime
from src.models import SessionLocal, User


class UserRole(Enum):
    """–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    DEMO = "demo"
    FULL = "full"
    VIP = "vip"
    ADMIN = "admin"


class UserPermissions:
    """–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π"""

    ROLE_PERMISSIONS = {
        UserRole.DEMO: {
            "contracts_per_day": 3,
            "max_file_size_mb": 5,
            "can_export_pdf": False,
            "can_export_docx": True,
            "can_export_xml": False,
            "can_use_rag": False,
            "can_generate_contracts": True,
            "can_analyze_contracts": True,
            "can_use_onboarding": False,
            "can_use_disagreements": False,
            "can_use_changes_analyzer": False,
            "llm_requests_per_day": 10,
        },
        UserRole.FULL: {
            "contracts_per_day": 50,
            "max_file_size_mb": 20,
            "can_export_pdf": True,
            "can_export_docx": True,
            "can_export_xml": True,
            "can_use_rag": True,
            "can_generate_contracts": True,
            "can_analyze_contracts": True,
            "can_use_onboarding": True,
            "can_use_disagreements": True,
            "can_use_changes_analyzer": True,
            "llm_requests_per_day": 100,
        },
        UserRole.VIP: {
            "contracts_per_day": 1000,
            "max_file_size_mb": 100,
            "can_export_pdf": True,
            "can_export_docx": True,
            "can_export_xml": True,
            "can_use_rag": True,
            "can_generate_contracts": True,
            "can_analyze_contracts": True,
            "can_use_onboarding": True,
            "can_use_disagreements": True,
            "can_use_changes_analyzer": True,
            "llm_requests_per_day": 1000,
            "priority_support": True,
        },
        UserRole.ADMIN: {
            "contracts_per_day": float('inf'),
            "max_file_size_mb": float('inf'),
            "can_export_pdf": True,
            "can_export_docx": True,
            "can_export_xml": True,
            "can_use_rag": True,
            "can_generate_contracts": True,
            "can_analyze_contracts": True,
            "can_use_onboarding": True,
            "can_use_disagreements": True,
            "can_use_changes_analyzer": True,
            "llm_requests_per_day": float('inf'),
            "can_manage_users": True,
            "can_manage_templates": True,
            "can_view_logs": True,
            "priority_support": True,
        }
    }

    @classmethod
    def get_permissions(cls, role: UserRole) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏"""
        return cls.ROLE_PERMISSIONS.get(role, cls.ROLE_PERMISSIONS[UserRole.DEMO])

    @classmethod
    def check_permission(cls, role: UserRole, permission: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∞"""
        perms = cls.get_permissions(role)
        return perms.get(permission, False)


def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'user' not in st.session_state:
        st.session_state.user = None
    if 'role' not in st.session_state:
        st.session_state.role = UserRole.DEMO
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False


def login_user(email: str, password: str = None) -> Optional[Dict[str, Any]]:
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è)
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    """
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.email == email, User.active == True).first()

        if user:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—è role –≤ –ë–î
            role_map = {
                'admin': UserRole.ADMIN,
                'senior_lawyer': UserRole.VIP,
                'lawyer': UserRole.FULL,
                'junior_lawyer': UserRole.DEMO,
            }
            role = role_map.get(user.role, UserRole.DEMO)

            st.session_state.user = {
                'id': user.id,
                'email': user.email,
                'name': user.name,
                'role': user.role
            }
            st.session_state.role = role
            st.session_state.authenticated = True

            return st.session_state.user

        return None
    finally:
        db.close()


def logout_user():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.session_state.user = None
    st.session_state.role = UserRole.DEMO
    st.session_state.authenticated = False


def get_current_user() -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return st.session_state.get('user')


def get_current_role() -> UserRole:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å"""
    return st.session_state.get('role', UserRole.DEMO)


def require_auth(role: Optional[UserRole] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –ï—Å–ª–∏ role —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç—Ä–µ–±—É–µ–º—É—é —Ä–æ–ª—å
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            if not st.session_state.get('authenticated', False):
                st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                show_login_form()
                return None

            if role:
                current_role = get_current_role()
                role_hierarchy = [UserRole.DEMO, UserRole.FULL, UserRole.VIP, UserRole.ADMIN]

                if role_hierarchy.index(current_role) < role_hierarchy.index(role):
                    st.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: {role.value}")
                    return None

            return func(*args, **kwargs)
        return wrapper
    return decorator


def show_login_form():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞"""
    st.markdown("### üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")

    # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞
    st.markdown("#### –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥")
    st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞:")

    demo_accounts = [
        {"email": "demo@example.com", "name": "Demo User", "role": "üîµ DEMO", "desc": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (3 –¥–æ–≥–æ–≤–æ—Ä–∞/–¥–µ–Ω—å)"},
        {"email": "user@example.com", "name": "Full User", "role": "üü¢ FULL", "desc": "–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (50 –¥–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–µ–Ω—å)"},
        {"email": "vip@example.com", "name": "VIP User", "role": "üü° VIP", "desc": "VIP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (1000 –¥–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–µ–Ω—å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)"},
        {"email": "admin@example.com", "name": "Admin User", "role": "üî¥ ADMIN", "desc": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–±–µ–∑–ª–∏–º–∏—Ç, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)"},
    ]

    cols = st.columns(2)
    for idx, account in enumerate(demo_accounts):
        with cols[idx % 2]:
            if st.button(
                f"{account['role']}\n{account['name']}",
                key=f"quick_login_{idx}",
                use_container_width=True,
                help=account['desc']
            ):
                user = login_user(account['email'])
                if user:
                    st.success(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")

    st.markdown("---")
    st.markdown("#### –í—Ö–æ–¥ –ø–æ email")

    with st.form("login_form"):
        email = st.text_input("Email", placeholder="user@example.com")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢")
        submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)

        if submit:
            if email:
                user = login_user(email, password)
                if user:
                    st.success(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['name']}!")
                    st.rerun()
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            else:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ email")

    st.markdown("---")

    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π
    with st.expander("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤"):
        st.markdown("""
        | –§—É–Ω–∫—Ü–∏—è | DEMO | FULL | VIP | ADMIN |
        |---------|------|------|-----|-------|
        | –î–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–µ–Ω—å | 3 | 50 | 1000 | ‚ôæÔ∏è |
        | LLM –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å | 10 | 100 | 1000 | ‚ôæÔ∏è |
        | –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
        | –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
        | –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | –≠–∫—Å–ø–æ—Ä—Ç PDF | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | –≠–∫—Å–ø–æ—Ä—Ç XML | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | RAG –ø–æ–∏—Å–∫ | ‚ùå | ‚úÖ | ‚úÖ | ‚úÖ |
        | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ | ‚ùå | ‚ùå | ‚úÖ | ‚úÖ |
        | –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ | ‚ùå | ‚ùå | ‚ùå | ‚úÖ |
        | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ | ‚ùå | ‚ùå | ‚ùå | ‚úÖ |
        """)

    st.info("""
    üí° **–°–æ–≤–µ—Ç:** –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç **admin@example.com**
    """)


def show_user_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
    if st.session_state.get('authenticated', False):
        user = get_current_user()
        role = get_current_role()
        perms = UserPermissions.get_permissions(role)

        st.sidebar.markdown("---")
        st.sidebar.markdown(f"### üë§ {user['name']}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å —Å —Ü–≤–µ—Ç–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        role_colors = {
            UserRole.DEMO: "üîµ",
            UserRole.FULL: "üü¢",
            UserRole.VIP: "üü°",
            UserRole.ADMIN: "üî¥"
        }
        role_indicator = role_colors.get(role, "‚ö™")
        st.sidebar.markdown(f"**–†–æ–ª—å:** {role_indicator} {role.value.upper()}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã
        with st.sidebar.expander("üìä –õ–∏–º–∏—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"):
            contracts_limit = perms['contracts_per_day']
            if contracts_limit == float('inf'):
                st.write("**–î–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–µ–Ω—å:** ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç")
            else:
                st.write(f"**–î–æ–≥–æ–≤–æ—Ä–æ–≤/–¥–µ–Ω—å:** {contracts_limit}")

            llm_limit = perms['llm_requests_per_day']
            if llm_limit == float('inf'):
                st.write("**LLM –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å:** ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç")
            else:
                st.write(f"**LLM –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å:** {llm_limit}")

            file_size = perms['max_file_size_mb']
            if file_size == float('inf'):
                st.write("**–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** ‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç")
            else:
                st.write(f"**–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size} MB")

            st.write("---")
            st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
            if perms.get('can_export_pdf'):
                st.write("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
            if perms.get('can_export_xml'):
                st.write("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ XML")
            if perms.get('can_use_rag'):
                st.write("‚úÖ RAG –ø–æ–∏—Å–∫")
            if perms.get('priority_support'):
                st.write("‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")

        col1, col2 = st.sidebar.columns(2)
        with col1:
            if st.button("üîÑ –°–º–µ–Ω–∏—Ç—å", use_container_width=True):
                logout_user()
                st.session_state.current_page = 'login'
                st.rerun()
        with col2:
            if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
                logout_user()
                st.rerun()
    else:
        st.sidebar.markdown("---")
        st.sidebar.warning("‚ö†Ô∏è –î–µ–º–æ-—Ä–µ–∂–∏–º\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
        if st.sidebar.button("üîê –í–æ–π—Ç–∏", use_container_width=True):
            st.session_state.current_page = 'login'
            st.rerun()


def check_feature_access(feature: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏"""
    role = get_current_role()
    return UserPermissions.check_permission(role, feature)


def show_upgrade_message(feature: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞"""
    st.warning(f"""
    ‚ö†Ô∏è **–§—É–Ω–∫—Ü–∏—è "{feature}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ**

    –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º:
    - **FULL** - –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    - **VIP** - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    """)


# –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
def create_demo_users():
    """–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    db = SessionLocal()
    try:
        demo_users = [
            {"email": "demo@example.com", "name": "Demo User", "role": "junior_lawyer"},
            {"email": "user@example.com", "name": "Full User", "role": "lawyer"},
            {"email": "vip@example.com", "name": "VIP User", "role": "senior_lawyer"},
            {"email": "admin@example.com", "name": "Admin User", "role": "admin"},
        ]

        for user_data in demo_users:
            existing = db.query(User).filter(User.email == user_data["email"]).first()
            if not existing:
                user = User(**user_data, active=True)
                db.add(user)

        db.commit()
    except Exception as e:
        print(f"Error creating demo users: {e}")
        db.rollback()
    finally:
        db.close()
