#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Contract AI System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ API –∫–ª—é—á–µ–π
"""
import sys
from pathlib import Path
from datetime import datetime

print("=" * 60)
print("–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CONTRACT AI SYSTEM")
print("=" * 60)
print()

# ============================================================
# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
# ============================================================
print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")

try:
    from config.settings import settings
    print("   ‚úì Config –∑–∞–≥—Ä—É–∂–µ–Ω")
    print(f"     - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
    print(f"     - LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {settings.default_llm_provider}")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    sys.exit(1)

try:
    from src.models import (
        init_db, SessionLocal, User, Template, Contract
    )
    print("   ‚úì Database models")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    sys.exit(1)

try:
    from src.services.document_parser import DocumentParser
    print("   ‚úì DocumentParser")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DocumentParser: {e}")

try:
    from src.services.template_manager import TemplateManager
    print("   ‚úì TemplateManager")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TemplateManager: {e}")

try:
    from src.agents.base_agent import BaseAgent
    print("   ‚úì BaseAgent")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BaseAgent: {e}")

try:
    from src.agents.orchestrator_agent import OrchestratorAgent
    print("   ‚úì OrchestratorAgent")
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OrchestratorAgent: {e}")

print()

# ============================================================
# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# ============================================================
print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

try:
    init_db()
    db = SessionLocal()
    print("   ‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    user_count = db.query(User).count()
    template_count = db.query(Template).count()
    contract_count = db.query(Contract).count()

    print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
    print(f"   - –®–∞–±–ª–æ–Ω–æ–≤: {template_count}")
    print(f"   - –î–æ–≥–æ–≤–æ—Ä–æ–≤: {contract_count}")

    db.close()
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞ –ë–î: {e}")
    sys.exit(1)

print()

# ============================================================
# 3. –¢–µ—Å—Ç Document Parser
# ============================================================
print("3. –¢–µ—Å—Ç Document Parser...")

try:
    parser = DocumentParser()
    print("   ‚úì DocumentParser —Å–æ–∑–¥–∞–Ω")
    print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {parser.supported_formats}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = Path("tests/fixtures/test_contract.docx")
    if test_file.exists():
        print(f"   ‚úì –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {test_file}")

        # –ü–∞—Ä—Å–∏–º
        result = parser.parse(str(test_file))
        print(f"   ‚úì –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –†–∞–∑–º–µ—Ä XML: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print(f"   ‚Ñπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")

except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞: {e}")

print()

# ============================================================
# 4. –¢–µ—Å—Ç Template Manager
# ============================================================
print("4. –¢–µ—Å—Ç Template Manager...")

try:
    db = SessionLocal()
    tm = TemplateManager(db)
    print("   ‚úì TemplateManager —Å–æ–∑–¥–∞–Ω")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    templates = tm.list_templates()
    print(f"   - –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")

    for tpl in templates:
        print(f"     ‚Ä¢ {tpl.name} (type: {tpl.contract_type}, v{tpl.version})")

    db.close()
except Exception as e:
    print(f"   ‚úó –û—à–∏–±–∫–∞: {e}")

print()

# ============================================================
# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
# ============================================================
print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤...")

agents_info = {
    'OrchestratorAgent': 'src.agents.orchestrator_agent',
    'ContractAnalyzerAgent': 'src.agents.contract_analyzer_agent',
    'ContractGeneratorAgent': 'src.agents.contract_generator_agent',
    'DisagreementProcessorAgent': 'src.agents.disagreement_processor_agent',
    'ChangesAnalyzerAgent': 'src.agents.changes_analyzer_agent',
    'QuickExportAgent': 'src.agents.quick_export_agent',
}

available_agents = []
for agent_name, module_path in agents_info.items():
    try:
        module_parts = module_path.rsplit('.', 1)
        module = __import__(module_parts[0], fromlist=[module_parts[1]])
        agent_class = getattr(module, agent_name, None)

        if agent_class:
            print(f"   ‚úì {agent_name}")
            available_agents.append(agent_name)
        else:
            print(f"   ‚úó {agent_name} - –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"   ‚úó {agent_name} - {e}")

print()
print(f"–î–æ—Å—Ç—É–ø–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(available_agents)}/{len(agents_info)}")

# ============================================================
# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
# ============================================================
print()
print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")

directories = [
    'data/uploads',
    'data/normalized',
    'data/reports',
    'data/templates',
    'data/exports',
    'chroma_data',
]

for directory in directories:
    path = Path(directory)
    if path.exists():
        file_count = len(list(path.glob('*')))
        print(f"   ‚úì {directory} ({file_count} —Ñ–∞–π–ª–æ–≤)")
    else:
        print(f"   ‚úó {directory} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

print()

# ============================================================
# –ò–¢–û–ì–û
# ============================================================
print("=" * 60)
print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
print("=" * 60)
print()
print("üìä –°–í–û–î–ö–ê:")
print(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
print(f"   - Document Parser: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
print(f"   - Template Manager: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
print(f"   - –ê–≥–µ–Ω—Ç—ã: ‚úÖ {len(available_agents)}/{len(agents_info)} –¥–æ—Å—Ç—É–ø–Ω—ã")
print()
print("‚ö†Ô∏è  –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ï–û–ë–•–û–î–ò–ú–û:")
print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
print("   2. –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏")
print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: streamlit run app.py")
print()
