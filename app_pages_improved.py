# -*- coding: utf-8 -*-
"""
Improved pages for Contract AI System
Use these to replace functions in app.py
"""
import streamlit as st
from src.utils.auth import get_current_user, check_feature_access, show_upgrade_message
from src.utils.contract_types import get_all_contract_names, get_contract_type_code
from src.utils.knowledge_base import KnowledgeBaseCategory


def page_generator_improved():
    """Improved Generator Agent page"""
    st.title("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤")

    # Check access
    if not check_feature_access('can_generate_contracts'):
        show_upgrade_message('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤')
        return

    user = get_current_user()
    user_id = user['id'] if user else 'demo_user'

    st.markdown("### –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞")

    # –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    contract_type_ru = st.selectbox(
        "üìã –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞",
        get_all_contract_names(),
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"
    )
    contract_type = get_contract_type_code(contract_type_ru)

    # Template ID - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with st.expander("‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"):
        template_id = st.text_input(
            "ID —à–∞–±–ª–æ–Ω–∞",
            value="",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"
        )
        use_llm_generation = st.checkbox(
            "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI (–±–µ–∑ —à–∞–±–ª–æ–Ω–∞)",
            help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞"
        )

    st.markdown("---")

    # –°—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞ - expandable
    col1, col2 = st.columns(2)

    with col1:
        with st.expander("üìã –°—Ç–æ—Ä–æ–Ω–∞ 1 (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å/–ü–æ—Å—Ç–∞–≤—â–∏–∫)", expanded=True):
            party1_type = st.selectbox("–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", ["–Æ–õ", "–ò–ü", "–§–∏–∑–ª–∏—Ü–æ"], key="p1_type")
            party1_name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ *", key="p1_name")
            party1_inn = st.text_input("–ò–ù–ù *", key="p1_inn")
            if party1_type == "–Æ–õ":
                party1_kpp = st.text_input("–ö–ü–ü", key="p1_kpp")
                party1_ogrn = st.text_input("–û–ì–†–ù", key="p1_ogrn")
            party1_address = st.text_area("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å", key="p1_address")

            st.markdown("**–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:**")
            party1_bank = st.text_input("–ë–∞–Ω–∫", key="p1_bank")
            party1_bik = st.text_input("–ë–ò–ö", key="p1_bik")
            party1_account = st.text_input("–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", key="p1_account")
            party1_corr_account = st.text_input("–ö–æ—Ä—Ä. —Å—á—ë—Ç", key="p1_corr")

            st.markdown("**–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å:**")
            party1_director = st.text_input("–î–∏—Ä–µ–∫—Ç–æ—Ä (–§–ò–û)", key="p1_dir")
            party1_basis = st.text_input("–î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏", value="–£—Å—Ç–∞–≤–∞", key="p1_basis")

    with col2:
        with st.expander("üìã –°—Ç–æ—Ä–æ–Ω–∞ 2 (–ó–∞–∫–∞–∑—á–∏–∫/–ü–æ–∫—É–ø–∞—Ç–µ–ª—å)", expanded=True):
            party2_type = st.selectbox("–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", ["–Æ–õ", "–ò–ü", "–§–∏–∑–ª–∏—Ü–æ"], key="p2_type")
            party2_name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ *", key="p2_name")
            party2_inn = st.text_input("–ò–ù–ù *", key="p2_inn")
            if party2_type == "–Æ–õ":
                party2_kpp = st.text_input("–ö–ü–ü", key="p2_kpp")
                party2_ogrn = st.text_input("–û–ì–†–ù", key="p2_ogrn")
            party2_address = st.text_area("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å", key="p2_address")

            st.markdown("**–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:**")
            party2_bank = st.text_input("–ë–∞–Ω–∫", key="p2_bank")
            party2_bik = st.text_input("–ë–ò–ö", key="p2_bik")
            party2_account = st.text_input("–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", key="p2_account")
            party2_corr_account = st.text_input("–ö–æ—Ä—Ä. —Å—á—ë—Ç", key="p2_corr")

            st.markdown("**–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å:**")
            party2_director = st.text_input("–î–∏—Ä–µ–∫—Ç–æ—Ä (–§–ò–û)", key="p2_dir")
            party2_basis = st.text_input("–î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏", value="–£—Å—Ç–∞–≤–∞", key="p2_basis")

    st.markdown("---")

    # –£—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
    st.subheader("üìÖ –°—Ä–æ–∫–∏ –∏ –¥–∞—Ç—ã")
    col1, col2, col3 = st.columns(3)
    with col1:
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞")
    with col2:
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è")
    with col3:
        auto_renewal = st.checkbox("–ê–≤—Ç–æ–ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è")

    st.markdown("---")

    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è")
    col1, col2, col3 = st.columns(3)
    with col1:
        total_amount = st.number_input("–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ (—Ä—É–±) *", min_value=0, value=100000)
        currency = st.selectbox("–í–∞–ª—é—Ç–∞", ["RUB", "USD", "EUR"])
    with col2:
        vat_included = st.checkbox("–ù–î–° –≤–∫–ª—é—á–µ–Ω", value=True)
        vat_rate = st.number_input("–°—Ç–∞–≤–∫–∞ –ù–î–° (%)", 0, 20, 20) if vat_included else 0
    with col3:
        payment_terms = st.number_input("–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã (–¥–Ω–µ–π)", 0, 365, 30)
        prepayment = st.number_input("–ê–≤–∞–Ω—Å (%)", 0, 100, 0)

    payment_method = st.selectbox(
        "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
        ["–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–ù–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–°–º–µ—à–∞–Ω–Ω—ã–π"]
    )

    st.markdown("---")

    st.subheader("‚ö†Ô∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å–∞–Ω–∫—Ü–∏–∏")
    col1, col2 = st.columns(2)
    with col1:
        penalty_rate = st.number_input(
            "–ü–µ–Ω—è –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É (% –≤ –¥–µ–Ω—å)",
            0.0, 1.0, 0.1, 0.01,
            help="–†–∞–∑–º–µ—Ä –ø–µ–Ω–∏ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
        )
        max_penalty = st.number_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–µ—É—Å—Ç–æ–π–∫–∞ (% –æ—Ç —Å—É–º–º—ã –¥–æ–≥–æ–≤–æ—Ä–∞)",
            0, 100, 10,
            help="–õ–∏–º–∏—Ç –Ω–µ—É—Å—Ç–æ–π–∫–∏"
        )
    with col2:
        liability_limit = st.number_input(
            "–õ–∏–º–∏—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (—Ä—É–±)",
            0, 10000000, 0,
            help="0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        )
        force_majeure = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä", value=True)

    st.markdown("---")

    if contract_type in ['supply', 'purchase']:
        st.subheader("üì¶ –£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            delivery_method = st.selectbox(
                "–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏",
                ["–°–∞–º–æ–≤—ã–≤–æ–∑", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"]
            )
            delivery_terms = st.selectbox("–£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ (Incoterms)", ["EXW", "FCA", "DAP", "DDP"])
        with col2:
            delivery_address = st.text_area("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            delivery_time = st.number_input("–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω–µ–π)", 1, 365, 14)

        st.markdown("---")

    st.subheader("‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
    col1, col2 = st.columns(2)
    with col1:
        signature_method = st.selectbox(
            "–°–ø–æ—Å–æ–± –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è",
            ["–ë—É–º–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å (–≠–¶–ü)", "–ü—Ä–æ—Å—Ç–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å"]
        )
    with col2:
        copies_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", 1, 10, 2)

    st.markdown("---")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    with st.expander("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"):
        additional_terms = st.text_area(
            "–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è",
            height=150,
            help="–£–∫–∞–∂–∏—Ç–µ –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ –¥–æ–≥–æ–≤–æ—Ä"
        )

    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä", type="primary", use_container_width=True):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not party1_name or not party2_name:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω")
            return

        if not party1_inn or not party2_inn:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ò–ù–ù –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω")
            return

        if total_amount <= 0:
            st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–æ–≥–æ–≤–æ—Ä–∞")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {
            'contract_type': contract_type,
            'party_1': {
                'type': party1_type,
                'name': party1_name,
                'inn': party1_inn,
                'kpp': locals().get('party1_kpp', ''),
                'ogrn': locals().get('party1_ogrn', ''),
                'address': party1_address,
                'bank': party1_bank,
                'bik': party1_bik,
                'account': party1_account,
                'corr_account': party1_corr_account,
                'director': party1_director,
                'basis': party1_basis,
            },
            'party_2': {
                'type': party2_type,
                'name': party2_name,
                'inn': party2_inn,
                'kpp': locals().get('party2_kpp', ''),
                'ogrn': locals().get('party2_ogrn', ''),
                'address': party2_address,
                'bank': party2_bank,
                'bik': party2_bik,
                'account': party2_account,
                'corr_account': party2_corr_account,
                'director': party2_director,
                'basis': party2_basis,
            },
            'financial': {
                'amount': total_amount,
                'currency': currency,
                'vat_included': vat_included,
                'vat_rate': vat_rate if vat_included else 0,
                'payment_terms': payment_terms,
                'prepayment': prepayment,
                'payment_method': payment_method,
            },
            'dates': {
                'start_date': str(start_date),
                'end_date': str(end_date),
                'auto_renewal': auto_renewal,
            },
            'liability': {
                'penalty_rate': penalty_rate,
                'max_penalty': max_penalty,
                'liability_limit': liability_limit if liability_limit > 0 else None,
                'force_majeure': force_majeure,
            },
            'signature': {
                'method': signature_method,
                'copies': copies_count,
            },
            'additional_terms': additional_terms if additional_terms else None,
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        if contract_type in ['supply', 'purchase']:
            params['delivery'] = {
                'method': delivery_method,
                'terms': delivery_terms,
                'address': delivery_address,
                'time_days': delivery_time,
            }

        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞..."):
            try:
                if use_llm_generation or not template_id:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é LLM –±–µ–∑ —à–∞–±–ª–æ–Ω–∞
                    st.info("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é AI...")

                    from src.services.llm_contract_generator import LLMContractGenerator

                    llm_gen = LLMContractGenerator(st.session_state.llm_gateway)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    full_params = params.copy()
                    full_params['contract_type'] = contract_type

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
                    contract_text = llm_gen.generate_contract_from_scratch(full_params)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é AI!")

                    st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä")
                    st.text_area("–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞", contract_text, height=400)

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        "üì• –°–∫–∞—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                        data=contract_text,
                        file_name=f"contract_{contract_type}_{user_id}.txt",
                        mime="text/plain"
                    )

                    return
                else:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É
                    from src.agents import ContractGeneratorAgent

                    agent = ContractGeneratorAgent(
                        llm_gateway=st.session_state.llm_gateway,
                        db_session=st.session_state.db_session
                    )

                    result = agent.execute({
                        'template_id': template_id if template_id else None,
                        'contract_type': contract_type,
                        'params': params,
                        'user_id': user_id
                    })

                if result and result.success:
                    st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("ID –¥–æ–≥–æ–≤–æ—Ä–∞", result.data.get('contract_id', 'N/A'))
                    with col2:
                        st.metric("–°—Ç–∞—Ç—É—Å", "–ì–æ—Ç–æ–≤")

                    if result.data.get('file_path'):
                        st.info(f"üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{result.data.get('file_path')}`")

                    if result.data.get('validation_passed'):
                        st.success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                    else:
                        st.warning("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                        if result.data.get('validation_warnings'):
                            st.json(result.data.get('validation_warnings'))
                else:
                    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –ø–æ —à–∞–±–ª–æ–Ω—É")

                    if st.button("ü§ñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI", type="primary"):
                        st.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é AI...")

                        from src.services.llm_contract_generator import LLMContractGenerator

                        llm_gen = LLMContractGenerator(st.session_state.llm_gateway)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        full_params = params.copy()
                        full_params['contract_type'] = contract_type

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
                        contract_text = llm_gen.generate_contract_from_scratch(full_params)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é AI!")

                        st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä")
                        st.text_area("–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞", contract_text, height=400)

                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                            data=contract_text,
                            file_name=f"contract_{contract_type}_{user_id}.txt",
                            mime="text/plain"
                        )

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

                # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if st.button("ü§ñ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é AI", key="error_fallback", type="primary"):
                    try:
                        st.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é AI...")

                        from src.services.llm_contract_generator import LLMContractGenerator

                        llm_gen = LLMContractGenerator(st.session_state.llm_gateway)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        full_params = params.copy()
                        full_params['contract_type'] = contract_type

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä
                        contract_text = llm_gen.generate_contract_from_scratch(full_params)

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é AI!")

                        st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä")
                        st.text_area("–¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞", contract_text, height=400)

                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä",
                            data=contract_text,
                            file_name=f"contract_{contract_type}_{user_id}.txt",
                            mime="text/plain"
                        )
                    except Exception as e2:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e2)}")


def page_knowledge_base():
    """Knowledge base page"""
    st.title("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")

    st.markdown("""
    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    kb_manager = st.session_state.get('kb_manager')
    if kb_manager:
        stats = kb_manager.get_category_statistics()

        col1, col2, col3, col4, col5, col6 = st.columns(6)

        with col1:
            st.metric("–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", stats.get('total', 0))

        categories_data = [
            (KnowledgeBaseCategory.FORMS, col2),
            (KnowledgeBaseCategory.LEGAL, col3),
            (KnowledgeBaseCategory.CASE_LAW, col4),
            (KnowledgeBaseCategory.KEY_CASES, col5),
            (KnowledgeBaseCategory.TRENDS, col6),
        ]

        for category, col in categories_data:
            cat_stats = stats.get(category.value, {})
            with col:
                st.metric(
                    f"{cat_stats.get('icon', 'üìÑ')} {cat_stats.get('name', '')}",
                    cat_stats.get('count', 0)
                )

    st.markdown("---")

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_info = kb_manager.get_all_categories_info() if kb_manager else []

    for cat_data in categories_info:
        category = cat_data['category']
        info = cat_data['info']
        doc_count = cat_data['document_count']

        with st.expander(f"{info['icon']} {info['name_ru']} ({doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"):
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {info['description']}")
            st.markdown(f"**–ö–æ–ª–ª–µ–∫—Ü–∏—è:** `{info['collection_name']}`")

            if doc_count > 0:
                documents = kb_manager.list_documents(category)
                st.markdown("**–î–æ–∫—É–º–µ–Ω—Ç—ã:**")
                for doc in documents[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    st.markdown(f"- {doc.name}")
                if doc_count > 5:
                    st.markdown(f"... –∏ –µ—â—ë {doc_count - 5} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    st.markdown("---")

    # –ü–æ–∏—Å–∫
    st.subheader("üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ —Å—Ç–∞—Ç—å—è 506 –ì–ö –†–§")

    col1, col2 = st.columns([3, 1])
    with col1:
        selected_categories = st.multiselect(
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞",
            [info['name_ru'] for info in [cat_data['info'] for cat_data in categories_info]],
            default=[info['name_ru'] for info in [cat_data['info'] for cat_data in categories_info][:3]]
        )
    with col2:
        top_k = st.number_input("–ú–∞–∫—Å. —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 1, 20, 5)

    if st.button("–ò—Å–∫–∞—Ç—å", type="primary"):
        if search_query:
            with st.spinner("–ü–æ–∏—Å–∫..."):
                st.info("üîç –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å RAG —Å–∏—Å—Ç–µ–º–æ–π.")
                # TODO: Implement search
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
