# -*- coding: utf-8 -*-
"""
Streamlit UI for Contract AI System
"""
import streamlit as st
import os
from datetime import datetime
from typing import Optional

# Configure page
st.set_page_config(
    page_title="Contract AI System",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Import settings first
from config.settings import settings

# Import auth utilities
from src.utils.auth import (
    init_session_state as init_auth_state,
    show_user_info,
    show_login_form,
    get_current_user,
    check_feature_access,
    show_upgrade_message,
    create_demo_users
)
from src.utils.contract_types import (
    get_all_contract_names,
    get_contract_type_code,
    get_contracts_by_category,
    get_all_categories
)
from src.utils.knowledge_base import (
    KnowledgeBaseManager,
    KnowledgeBaseCategory,
    initialize_knowledge_base
)

# Import improved pages
from app_pages_improved import page_generator_improved, page_knowledge_base

# Import agents and services
try:
    from src.agents import (
        OrchestratorAgent,
        OnboardingAgent,
        ContractGeneratorAgent,
        ContractAnalyzerAgent,
        DisagreementProcessorAgent,
        ChangesAnalyzerAgent,
        QuickExportAgent
    )
    from src.services.llm_gateway import LLMGateway
    from src.models import SessionLocal
    AGENTS_AVAILABLE = True
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    AGENTS_AVAILABLE = False


def init_session_state():
    """Initialize session state"""
    # Initialize auth state
    init_auth_state()

    # Initialize page state
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'home'

    # Initialize services
    if 'llm_gateway' not in st.session_state and AGENTS_AVAILABLE:
        st.session_state.llm_gateway = LLMGateway()
    if 'db_session' not in st.session_state and AGENTS_AVAILABLE:
        st.session_state.db_session = SessionLocal()

    # Initialize knowledge base
    if 'kb_manager' not in st.session_state:
        st.session_state.kb_manager = initialize_knowledge_base()

    # Create demo users on first run
    if 'demo_users_created' not in st.session_state:
        create_demo_users()
        st.session_state.demo_users_created = True


def sidebar_navigation():
    """Sidebar navigation"""
    st.sidebar.title("üìÑ Contract AI System")
    st.sidebar.markdown("---")

    pages = {
        'home': 'üè† –ì–ª–∞–≤–Ω–∞—è',
        'onboarding': 'üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤',
        'generator': '‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
        'analyzer': 'üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
        'disagreements': '‚öñÔ∏è –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è',
        'changes': 'üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        'export': 'üì§ –≠–∫—Å–ø–æ—Ä—Ç',
        'knowledge_base': 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
        'settings': '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    }

    # Add logs page for admins
    if check_feature_access('can_view_logs'):
        pages['logs'] = 'üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã'

    for key, label in pages.items():
        if st.sidebar.button(label, key=f"nav_{key}"):
            st.session_state.current_page = key

    st.sidebar.markdown("---")

    # Show user info
    show_user_info()

    st.sidebar.markdown("---")
    st.sidebar.info(f"**–í–µ—Ä—Å–∏—è:** 1.0.0\n**LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {settings.default_llm_provider}")


def page_home():
    """Home page"""
    st.title("üè† Contract AI System")
    st.markdown("### –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("**üì• Onboarding Agent**\n\n–ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    with col2:
        st.success("**‚úçÔ∏è Generator Agent**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º XML —Å LLM-–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
    
    with col3:
        st.warning("**üîç Analyzer Agent**\n\n–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    col4, col5, col6 = st.columns(3)
    
    with col4:
        st.error("**‚öñÔ∏è Disagreement Agent**\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–∞–≤–æ–≤—ã–º–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏, —ç–∫—Å–ø–æ—Ä—Ç –≤ –≠–î–û")
    
    with col5:
        st.info("**üìä Changes Analyzer**\n\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞, –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    with col6:
        st.success("**üì§ Quick Export**\n\n–ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ DOCX, PDF, TXT, JSON")
    
    st.markdown("---")
    st.markdown("**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** ‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã")


def page_onboarding():
    """Onboarding Agent page"""
    st.title("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

    # Check access
    if not check_feature_access('can_use_onboarding'):
        show_upgrade_message('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤')
        return

    user = get_current_user()
    user_id = user['id'] if user else 'demo_user'

    st.markdown("### –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    user_query = st.text_area(
        "–ó–∞–ø—Ä–æ—Å",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù—É–∂–µ–Ω –¥–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ 500 000 —Ä—É–±–ª–µ–π —Å –û–û–û '–ü–æ—Å—Ç–∞–≤—â–∏–∫'",
        height=150
    )
    
    if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å", type="primary"):
        if not user_query:
            st.error("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
            return
        
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            try:
                agent = OnboardingAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )
                
                result = agent.execute({
                    'user_query': user_query,
                    'user_id': user_id
                })
                
                if result.success:
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        st.write(f"**–¢–∏–ø:** {result.data.get('contract_type', 'N/A')}")
                        st.write(f"**–î–µ–π—Å—Ç–≤–∏–µ:** {result.data.get('intent', 'N/A')}")
                    
                    with col2:
                        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
                        params = result.data.get('extracted_params', {})
                        for key, value in params.items():
                            st.write(f"**{key}:** {value}")
                    
                    if result.next_action:
                        st.info(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** {result.next_action}")
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_generator():
    """Generator Agent page"""
    st.title("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
    
    st.markdown("### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ —à–∞–±–ª–æ–Ω—É")
    
    col1, col2 = st.columns(2)
    
    with col1:
        template_id = st.text_input("ID —à–∞–±–ª–æ–Ω–∞", value="tpl_supply_001")
        contract_type = st.selectbox(
            "–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞",
            ["supply", "service", "lease", "purchase", "confidentiality"]
        )
    
    with col2:
        party_a = st.text_input("–°—Ç–æ—Ä–æ–Ω–∞ A", value="–û–û–û '–ö–æ–º–ø–∞–Ω–∏—è'")
        party_b = st.text_input("–°—Ç–æ—Ä–æ–Ω–∞ B", value="–û–û–û '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'")
    
    amount = st.number_input("–°—É–º–º–∞ (—Ä—É–±)", min_value=0, value=100000)
    user_id = st.text_input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="user_001", key="gen_user")
    
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä", type="primary"):
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞..."):
            try:
                agent = ContractGeneratorAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )
                
                result = agent.execute({
                    'template_id': template_id,
                    'contract_type': contract_type,
                    'params': {
                        'party_a': party_a,
                        'party_b': party_b,
                        'amount': amount
                    },
                    'user_id': user_id
                })
                
                if result.success:
                    st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    st.write(f"**Contract ID:** {result.data.get('contract_id')}")
                    st.write(f"**–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:** {result.data.get('file_path')}")
                    
                    if result.data.get('validation_passed'):
                        st.success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                    else:
                        st.warning("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_analyzer():
    """Analyzer Agent page"""
    st.title("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤")

    # Check access
    if not check_feature_access('can_analyze_contracts'):
        show_upgrade_message('–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤')
        return

    user = get_current_user()
    user_id = user['id'] if user else 'demo_user'

    st.markdown("### –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä", type=['docx', 'pdf', 'xml'])

    counterparty_tin = st.text_input("–ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", value="7700000000")
    
    if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        if not uploaded_file:
            st.error("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return
        
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞..."):
            try:
                from src.models import Contract
                from src.services.document_parser import DocumentParser

                # Save uploaded file
                file_path = os.path.join("data/contracts", uploaded_file.name)
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                with open(file_path, 'wb') as f:
                    f.write(uploaded_file.getbuffer())

                # Parse document to XML
                st.info("üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
                parser = DocumentParser()
                parsed_xml = parser.parse(file_path)

                if not parsed_xml:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
                    return

                # Create contract in database
                st.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î...")
                contract = Contract(
                    file_name=os.path.basename(file_path),
                    file_path=file_path,
                    document_type='contract',
                    contract_type='unknown',  # Will be determined by analyzer
                    status='pending',  # Valid values: pending, analyzing, reviewing, completed, error
                    assigned_to=user_id,
                    meta_info=parsed_xml  # Store XML in meta_info
                )
                st.session_state.db_session.add(contract)
                st.session_state.db_session.commit()
                st.session_state.db_session.refresh(contract)

                # Analyze contract
                st.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞...")
                # Update status to analyzing
                contract.status = 'analyzing'
                st.session_state.db_session.commit()

                agent = ContractAnalyzerAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )

                result = agent.execute({
                    'contract_id': contract.id,
                    'parsed_xml': parsed_xml,
                    'check_counterparty': True,
                    'metadata': {
                        'counterparty_tin': counterparty_tin,
                        'uploaded_by': user_id
                    }
                })
                
                if result.success:
                    # Update status to completed
                    contract.status = 'completed'
                    st.session_state.db_session.commit()

                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")

                    # Determine risk level from risks
                    risks = result.data.get('risks', [])
                    high_risks = sum(1 for r in risks if r.get('severity') == 'high')
                    medium_risks = sum(1 for r in risks if r.get('severity') == 'medium')

                    if high_risks > 0:
                        risk_level = 'high'
                        st.error(f"üî¥ **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** –í–´–°–û–ö–ò–ô ({high_risks} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤)")
                    elif medium_risks > 2:
                        risk_level = 'medium'
                        st.warning(f"üü° **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** –°–†–ï–î–ù–ò–ô ({medium_risks} —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∏—Å–∫–æ–≤)")
                    else:
                        risk_level = 'low'
                        st.success(f"üü¢ **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** –ù–ò–ó–ö–ò–ô")
                    
                    # Risks
                    st.subheader("–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏")
                    risks = result.data.get('risks', [])
                    if risks:
                        for i, risk in enumerate(risks, 1):
                            with st.expander(f"{i}. {risk.get('category', 'N/A')} - {risk.get('severity', 'N/A')}"):
                                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {risk.get('description', 'N/A')}")
                                st.write(f"**–†–∞–∑–¥–µ–ª:** {risk.get('section_name', 'N/A')}")
                    else:
                        st.info("–†–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

                    # Recommendations
                    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    recommendations = result.data.get('recommendations', [])
                    if recommendations:
                        for rec in recommendations:
                            st.write(f"- {rec.get('recommendation_text', 'N/A')}")

                else:
                    # Update status to error
                    contract.status = 'error'
                    st.session_state.db_session.commit()
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")

            except Exception as e:
                # Update status to error if contract exists
                if 'contract' in locals():
                    contract.status = 'error'
                    st.session_state.db_session.commit()
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_disagreements():
    """Disagreement Processor page"""
    st.title("‚öñÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π")

    # Check access
    if not check_feature_access('can_use_disagreements'):
        show_upgrade_message('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π')
        return

    user = get_current_user()
    user_id = user['id'] if user else 'demo_user'

    st.markdown("### –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏")

    contract_id = st.text_input("ID –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", value="contract_001")
    analysis_id = st.text_input("ID –∞–Ω–∞–ª–∏–∑–∞", value="analysis_001")
    
    auto_prioritize = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è", value=True)
    
    if st.button("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è", type="primary"):
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π..."):
            try:
                agent = DisagreementProcessorAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )
                
                result = agent.execute({
                    'contract_id': contract_id,
                    'analysis_id': analysis_id,
                    'auto_prioritize': auto_prioritize,
                    'user_id': user_id
                })
                
                if result.success:
                    st.success("‚úÖ –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                    st.write(f"**Disagreement ID:** {result.data.get('disagreement_id')}")
                    st.write(f"**–í—Å–µ–≥–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:** {result.data.get('total_objections')}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {result.data.get('status')}")
                    
                    # Show objections
                    st.subheader("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è")
                    objections = result.data.get('objections', [])
                    for obj in objections:
                        with st.expander(f"–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ {obj.get('objection_number')} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {obj.get('priority')})"):
                            st.write(f"**–†–∞–∑–¥–µ–ª:** {obj.get('section_reference')}")
                            st.write(f"**–¢–µ–∫—Å—Ç:** {obj.get('objection_text')}")
                            st.write(f"**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {obj.get('legal_justification')}")
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_changes():
    """Changes Analyzer page"""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    # Check access
    if not check_feature_access('can_use_changes_analyzer'):
        show_upgrade_message('–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
        return

    st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞")

    col1, col2 = st.columns(2)

    with col1:
        from_version_id = st.number_input("–û—Ç –≤–µ—Ä—Å–∏–∏ ID", min_value=1, value=1)

    with col2:
        to_version_id = st.number_input("–î–æ –≤–µ—Ä—Å–∏–∏ ID", min_value=1, value=2)

    contract_id = st.text_input("ID –¥–æ–≥–æ–≤–æ—Ä–∞", value="contract_001", key="changes_contract")
    
    if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."):
            try:
                agent = ChangesAnalyzerAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )
                
                result = agent.execute({
                    'from_version_id': from_version_id,
                    'to_version_id': to_version_id,
                    'contract_id': contract_id
                })
                
                if result.success:
                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π", result.data.get('total_changes', 0))
                    
                    with col2:
                        assessment = result.data.get('overall_assessment', 'N/A')
                        st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", assessment)
                    
                    with col3:
                        st.metric("–û—Ç—á–µ—Ç", "–ì–æ—Ç–æ–≤" if result.data.get('report_path') else "–ù–µ—Ç")
                    
                    if result.data.get('report_path'):
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                            data=open(result.data['report_path'], 'rb'),
                            file_name=os.path.basename(result.data['report_path'])
                        )
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_export():
    """Quick Export page"""
    st.title("üì§ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç")

    # Check access
    user = get_current_user()
    user_id = user['id'] if user else 'demo_user'

    st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç –¥–æ–≥–æ–≤–æ—Ä–∞")

    contract_id = st.text_input("ID –¥–æ–≥–æ–≤–æ—Ä–∞", value="contract_001", key="export_contract")

    col1, col2 = st.columns(2)

    with col1:
        export_format = st.selectbox(
            "–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞",
            ["docx", "pdf", "txt", "json", "xml", "all"]
        )

    with col2:
        include_analysis = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", value=False)

    # Check PDF export permission
    if export_format in ['pdf', 'all']:
        if not check_feature_access('can_export_pdf'):
            st.warning("‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            if export_format == 'pdf':
                show_upgrade_message('–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF')
                return
    
    if st.button("üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        if not AGENTS_AVAILABLE:
            st.error("–ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç..."):
            try:
                agent = QuickExportAgent(
                    llm_gateway=st.session_state.llm_gateway,
                    db_session=st.session_state.db_session
                )
                
                result = agent.execute({
                    'contract_id': contract_id,
                    'export_format': export_format,
                    'include_analysis': include_analysis,
                    'user_id': user_id
                })
                
                if result.success:
                    st.success("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    file_paths = result.data.get('file_paths', {})
                    for fmt, path in file_paths.items():
                        if path and os.path.exists(path):
                            st.write(f"**{fmt.upper()}:** {path}")
                            with open(path, 'rb') as f:
                                st.download_button(
                                    f"üì• –°–∫–∞—á–∞—Ç—å {fmt.upper()}",
                                    data=f,
                                    file_name=os.path.basename(path),
                                    key=f"download_{fmt}"
                                )
                else:
                    st.error(f"–û—à–∏–±–∫–∞: {result.error}")
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")


def page_login():
    """Login page"""
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    show_login_form()


def page_logs():
    """System logs page (admin only)"""
    st.title("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")

    # Check admin access
    if not check_feature_access('can_view_logs'):
        st.error("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    st.markdown("### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")

    # Tabs for different log types
    tab1, tab2, tab3, tab4 = st.tabs(["üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", "ü§ñ LLM –∑–∞–ø—Ä–æ—Å—ã", "üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "‚ö†Ô∏è –û—à–∏–±–∫–∏"])

    with tab1:
        st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")

        # Real-time toggle
        realtime = st.checkbox("–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", value=False)

        # Filter options
        col1, col2 = st.columns(2)
        with col1:
            log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å", ["ALL", "INFO", "WARNING", "ERROR"])
        with col2:
            lines = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫", 10, 1000, 100)

        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏") or realtime:
            try:
                # Read log file
                log_file = "streamlit.log"
                if os.path.exists(log_file):
                    with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                        all_lines = f.readlines()
                        # Get last N lines
                        recent_lines = all_lines[-lines:]

                        # Filter by level
                        if log_level != "ALL":
                            recent_lines = [l for l in recent_lines if log_level in l]

                        log_text = ''.join(recent_lines)
                        st.text_area("–õ–æ–≥–∏", log_text, height=400)
                else:
                    st.warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

    with tab2:
        st.subheader("LLM –∑–∞–ø—Ä–æ—Å—ã")

        if AGENTS_AVAILABLE:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM")
            # This would query database for LLM requests
            st.markdown("""
            **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
            - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: -
            - –£—Å–ø–µ—à–Ω—ã—Ö: -
            - –û—à–∏–±–æ–∫: -
            - –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: - –º—Å
            """)
        else:
            st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    with tab3:
        st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        if AGENTS_AVAILABLE:
            from src.models import User
            db = SessionLocal()
            try:
                users = db.query(User).all()

                st.markdown(f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}")

                # User table
                user_data = []
                for u in users:
                    user_data.append({
                        "Email": u.email,
                        "–ò–º—è": u.name,
                        "–†–æ–ª—å": u.role,
                        "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ" if u.active else "‚ùå"
                    })

                if user_data:
                    import pandas as pd
                    df = pd.DataFrame(user_data)
                    st.dataframe(df, use_container_width=True)
            finally:
                db.close()
        else:
            st.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    with tab4:
        st.subheader("–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫")

        # Last errors
        st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:**")
        try:
            log_file = "streamlit.log"
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                    all_lines = f.readlines()
                    error_lines = [l for l in all_lines if 'ERROR' in l or 'Exception' in l]
                    recent_errors = error_lines[-50:]

                    if recent_errors:
                        error_text = ''.join(recent_errors)
                        st.text_area("–û—à–∏–±–∫–∏", error_text, height=400)
                    else:
                        st.success("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            else:
                st.warning("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")


def page_settings():
    """Settings page"""
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    st.markdown("### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")

    st.subheader("LLM Provider")
    provider = st.selectbox(
        "–ü—Ä–æ–≤–∞–π–¥–µ—Ä",
        ["openai", "anthropic", "yandex", "gigachat"],
        index=0
    )

    api_key = st.text_input("API Key", type="password", value="")

    st.subheader("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    db_url = st.text_input("Database URL", value=settings.database_url)

    st.subheader("RAG System")
    chroma_path = st.text_input("ChromaDB Path", value=settings.chroma_persist_directory)

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")


def main():
    """Main application"""
    init_session_state()
    sidebar_navigation()

    # Route to page
    page = st.session_state.current_page

    if page == 'login':
        page_login()
    elif page == 'home':
        page_home()
    elif page == 'onboarding':
        page_onboarding()
    elif page == 'generator':
        page_generator_improved()  # Use improved version
    elif page == 'analyzer':
        page_analyzer()
    elif page == 'disagreements':
        page_disagreements()
    elif page == 'changes':
        page_changes()
    elif page == 'export':
        page_export()
    elif page == 'knowledge_base':
        page_knowledge_base()  # Add knowledge base page
    elif page == 'logs':
        page_logs()  # Admin logs page
    elif page == 'settings':
        page_settings()


if __name__ == "__main__":
    main()
