#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow - –∞–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
"""
from pathlib import Path
from config.settings import settings
from src.models import init_db, SessionLocal
from src.services.llm_gateway import LLMGateway
from src.services.document_parser import DocumentParser
from src.agents.contract_analyzer_agent import ContractAnalyzerAgent

print("=" * 70)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û WORKFLOW: –ê–ù–ê–õ–ò–ó –î–û–ì–û–í–û–†–ê")
print("=" * 70)
print()

# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
init_db()
db = SessionLocal()
llm_gateway = LLMGateway(provider="openai")
parser = DocumentParser()
print("   ‚úì –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
print()

# 2. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
print("2. –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞...")
test_file = Path("tests/fixtures/test_contract.docx")

if not test_file.exists():
    print(f"   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
    exit(1)

parsed_xml = parser.parse(str(test_file))
print(f"   ‚úì –î–æ–≥–æ–≤–æ—Ä —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω ({len(parsed_xml)} —Å–∏–º–≤–æ–ª–æ–≤ XML)")
print()

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
print("3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –ë–î...")
from src.models import Contract
from datetime import datetime

import json
contract = Contract(
    file_name=test_file.name,
    file_path=str(test_file),
    document_type="contract",
    contract_type="supply",
    status="analyzing",
    meta_info=json.dumps({"test": True})
)
db.add(contract)
db.commit()
db.refresh(contract)
print(f"   ‚úì –î–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω —Å ID: {contract.id}")
print()

# 4. –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Contract Analyzer Agent
print("4. –ó–∞–ø—É—Å–∫ Contract Analyzer Agent...")
print("   (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥, –∏–¥—ë—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI...)")
print()

try:
    analyzer = ContractAnalyzerAgent(
        llm_gateway=llm_gateway,
        db_session=db
    )

    result = analyzer.execute({
        'contract_id': contract.id,
        'parsed_xml': parsed_xml,
        'metadata': {
            'file_name': test_file.name,
            'contract_type': 'supply'
        }
    })

    if result.success:
        print("   ‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û!")
        print()
        print("=" * 70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 70)

        data = result.data

        # –†–∏—Å–∫–∏
        if 'risks' in data and data['risks']:
            print(f"\nüìä –í–´–Ø–í–õ–ï–ù–û –†–ò–°–ö–û–í: {len(data['risks'])}")
            for i, risk in enumerate(data['risks'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"\n{i}. {risk.get('title', '–†–∏—Å–∫')}")
                print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {risk.get('category', 'N/A')}")
                print(f"   –°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å: {risk.get('severity', 'N/A')}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {risk.get('description', 'N/A')[:100]}...")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'recommendations' in data and data['recommendations']:
            print(f"\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: {len(data['recommendations'])}")
            for i, rec in enumerate(data['recommendations'][:3], 1):
                print(f"\n{i}. {rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')}")
                print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.get('priority', 'N/A')}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {rec.get('description', 'N/A')[:100]}...")

        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        if 'overall_risk_level' in data:
            print(f"\n\n‚ö†Ô∏è  –û–ë–©–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê: {data['overall_risk_level']}")

        print("\n" + "=" * 70)
        print("‚úÖ –ü–û–õ–ù–´–ô WORKFLOW –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù –£–°–ü–ï–®–ù–û!")
        print("=" * 70)

    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.error}")

except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

finally:
    db.close()
